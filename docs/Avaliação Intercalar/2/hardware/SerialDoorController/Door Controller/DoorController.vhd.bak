library ieee;
use ieee.std_logic_1164.all;

entity DoorController is 
	port
	(
		-- Input ports
		Clk 		: in std_logic;
		Reset    : in std_logic;
		Dval 		: in std_logic;
		Din	 	: in std_logic_vector(4 downto 0);
		Sclose	: in std_logic;
		Sopen		: in std_logic; 
		Psensor 	: in std_logic;
	
		-- Output ports
		OnOff		: out std_logic;
		Dout		: out std_logic_vector(4 downto 0);
		Done		: out std_logic
	);
end DoorController;

architecture behavioral of DoorController is

type STATE_TYPE is (STATE_WAITING, STATE_READY, STATE_OPEN, STATE_CLOSE, STATE_INTERRUPCAO, STATE_DONE);

signal CurrentState, NextState: STATE_TYPE;

begin

--FLIP-FLOP'S
CurrentState <= STATE_WAITING when Reset = '1' else NextState when rising_edge(Clk);

--GENERATE NEXT STATE
GenerateNextState:

process (CurrentState, Dval, Din, Sclose, Sopen, Psensor)

begin

	case CurrentState is
		
		when STATE_WAITING  => 			if (Dval = '1') then
													NextState <= STATE_TRAMA_RECEBIDA;
													
												else
													NextState <= STATE_WAITING;
												end if;									
											
		
		when STATE_READY  => 			if(Din(0) = '1') then
													NextState <= STATE_OPEN;
												else 
													NextState <= STATE_CLOSE;
													end if;	
												
		when STATE_OPEN   => 				if(Sopen = '1') then
													NextState <= STATE_DONE;
												else
													NextState <= STATE_OPEN;
													end if;							
													
		when STATE_CLOSE  =>				if(Sclose = '1') then
													NextState <= STATE_DONE;
												elsif (Psensor = '1') then
														NextState <= STATE_INTERRUPCAO;
													else 
														NextState <= STATE_CLOSED;	
													end if;
														end if;
		
		when STATE_INTERRUPCAO 	=>    if(Sopen = '1') then
													NextState <= STATE_CLOSE;
												else
													NextState <= STATE_INTERRUPCAO;
													end if;
													
	
		
		when STATE_DONE         =>    if (Dval = '1') then
													NextState <= STATE_DONE;
													
												else
													NextState <= STATE_WAITING;
												end if;
	end case;
	
end process;

-- GENERATE OUTPUTS
OnOff <= '0' when (CurrentState = STATE_DONE) else '1';
Dout(0) <= '1' when (CurrentState = STATE_INTERRUPÃ‡AO) else Din(0);
Done	<= '1' when (CurrentState = STATE_DONE) else '0';

end behavioral;